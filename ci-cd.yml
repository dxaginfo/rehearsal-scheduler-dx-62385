name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-client:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
          
      - name: Install client dependencies
        run: |
          cd client
          npm ci
          
      - name: Run client tests
        run: |
          cd client
          npm test
          
  test-server:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rehearsal_scheduler_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
          
      - name: Install server dependencies
        run: |
          cd server
          npm ci
          
      - name: Run database migrations
        run: |
          cd server
          PGPASSWORD=postgres psql -h localhost -U postgres -d rehearsal_scheduler_test -f ./db/migrations/001_initial_schema.sql
          
      - name: Run server tests
        run: |
          cd server
          npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/rehearsal_scheduler_test
          JWT_SECRET: test_secret
          
  build:
    needs: [test-client, test-server]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push client image
        uses: docker/build-push-action@v3
        with:
          context: ./client
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rehearsal-scheduler-client:latest
          build-args: |
            REACT_APP_API_URL=${{ secrets.API_URL }}
            
      - name: Build and push server image
        uses: docker/build-push-action@v3
        with:
          context: ./server
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rehearsal-scheduler-server:latest
          
  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to production
        run: echo "Deploy to production would go here"
        # Deployment step would be added here based on hosting platform
        # For example, deploy to AWS, Heroku, or Digital Ocean